Index: app/chats/routes.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Blueprint, jsonify, request, make_response, send_file\nfrom ..models import Chat, Messages\nfrom .. import db\nfrom app.chats.lyria_demo_test2 import generate_audio\nimport os\nimport time\nimport asyncio\nimport os\nfrom pathlib import Path\nfrom threading import Thread\n\nroutes_bp = Blueprint('routes', __name__)\n\nmusic_folder = os.path.abspath(os.path.join(os.path.dirname( __file__ ), '..', '..', 'MusicDownloadFiles'))\n\n\ndef commit(new_obj, action = \"add\"):   \n    if action == \"add\":\n        db.session.add(new_obj)\n        db.session.commit()\n    elif action == \"delete\":\n        db.session.delete(new_obj)\n        db.session.commit()\n\n\ndef create_a_message_and_send_prompt(prompt, chat_id, data, prompt_id):\n    print(data)\n    asyncio.run(generate_audio(data[\"bpm\"], data[\"key\"], prompt, chat_id, prompt_id))\n\n# chat functionality\n@routes_bp.route('/chat')\ndef get_chats():\n    \n    try:\n        chats = Chat.query.all()\n        if chats:\n            chat_list = [chat.to_dict() for chat in chats]\n            return make_response(jsonify(chat_list), 200)\n        \n        else:\n            return make_response(jsonify({'message': \"No chats yet\"}), 200)\n    except Exception as e:\n        return make_response(jsonify({\"error\": str(e)}), 404)\n\n@routes_bp.route('/chat/<int:id>', methods=[\"DELETE\"])\ndef delete_chat(id):\n    try:\n        chat = Chat.query.get(id)\n        \n        if not chat:\n            return make_response(jsonify({\"message\": \"Chat is not found\"}), 404)\n        messages = chat.messages\n\n        commit(chat, \"delete\")\n        return '', 204\n    except Exception as e:\n        return make_response(jsonify({\"message\": str(e)}), 500)\n\n@routes_bp.route('/chat/<int:id>', methods=[\"PUT\"])\ndef update_chat_name(id):\n    try:\n        data = request.get_json()\n        chat = Chat.query.get(id)\n        if 'title' in data:\n            chat.title = data['title']\n            db.session.commit()\n            \n            return make_response(jsonify({\"message\": \"Update successful\"}, 200))\n        return make_response(jsonify({'message': \"No new name identified\"}), 400)\n    except Exception as e:\n        return make_response(jsonify({\"message\": str(e)}), 500)\n\n\n# since the new chat will start with the first message sent, then adding a message should be able to add a convo object to db\n@routes_bp.route('/talk', methods=['POST'])\ndef post_chats():\n    data = request.get_json()\n    if not data or 'prompt' not in data:\n        return jsonify({\"error\": \"Missing message content\"})\n    if 'chat' not in data:\n        number_of_chats = Chat.query.count()\n        new_chat = Chat(title=f\"Chat {number_of_chats}\", user_id = 1)\n        commit(new_chat)\n        # Here we would have a process that gives us music\n        new_exchange = Messages(role=\"user\", content=data[\"prompt\"], convo=new_chat.id)\n        \n        commit(new_exchange)\n\n        \n        Thread(target=create_a_message_and_send_prompt, args=(new_exchange.content, new_chat.id, data, new_exchange.id)\n).start()\n        return make_response(jsonify({\"new_chat\": new_chat.id}), 200)\n    # Here we would have a process that gives us music\n    else:\n        new_exchange = Messages(role=\"user\", content=data[\"prompt\"], convo=data[\"chat\"])\n        commit(new_exchange)\n        \n        Thread(target=create_a_message_and_send_prompt, args=(new_exchange.content, data[\"chat\"], data, new_exchange.id)).start()\n        return make_response(jsonify({\"message\": \"New message created\"}), 200)\n    \n@routes_bp.route('/get-audio/<int:chat_id>/<int:message_id>')\ndef get_audio(chat_id, message_id):\n    file_path = f'/home/pol/projects/caps/backend/MusicDownloadFiles/lyria_{chat_id}_{message_id}.wav'\n    try :\n        return send_file(file_path, mimetype='audio/wav')\n    except FileNotFoundError:\n        return make_response(jsonify({'message': 'No audio available'}), 404)\n   \n\n@routes_bp.route('/getmessages/<int:id>')\ndef get_messages(id):\n    try:\n        convo = Chat.query.get(id)\n        messages = convo.messages\n        if messages:\n            message_list = [msg.to_dict() for msg in messages]\n        return make_response(jsonify(message_list), 200)\n    except Exception as e:\n        return make_response(jsonify({\"message\": str(e)}), 500)
===================================================================
diff --git a/app/chats/routes.py b/app/chats/routes.py
--- a/app/chats/routes.py	
+++ b/app/chats/routes.py	
@@ -100,7 +100,7 @@
     
 @routes_bp.route('/get-audio/<int:chat_id>/<int:message_id>')
 def get_audio(chat_id, message_id):
-    file_path = f'/home/pol/projects/caps/backend/MusicDownloadFiles/lyria_{chat_id}_{message_id}.wav'
+    file_path = f'{music_folder}/lyria_{chat_id}_{message_id}.wav'
     try :
         return send_file(file_path, mimetype='audio/wav')
     except FileNotFoundError:
